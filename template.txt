// string->void
void CCadesSigner_put_tsa_address(CCadesSigner *m, char* value)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return;
    }

    CAtlStringA sValue(value);
    HRESULT hr = m->obj->put_TSAAddress(sValue);
    ErrMsgFromHResult(hr, *(m->err));
    return;
}


// void->object
CCadesAttributes *CCadesSigner_get_authenticated_attributes(CCadesSigner *m)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return 0;
    }

    boost::shared_ptr<CryptoPro::PKI::CAdES::CPPCadesCPAttributesObject> pObj;
    HRESULT hr = m->obj->CPPAttributesObject(pObj);
    ErrMsgFromHResult(hr, *(m->err));

    CCadesAttributes *ret = CCadesAttributes_create();
    ret->obj = pObj;

    return ret;
}

// void->blob
char* CCadesAttribute_get_value(CCadesAttribute *m)
{
    CPPCadesCPAttributeObject *obj;

    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, m->err);
        return 0;
    }

    obj = static_cast<CPPCadesCPAttributeObject *>(m->obj);
    CryptoPro::CBlob blob;
    HRESULT hr = obj->get_Value(blob);
    CAtlString sValue((char*)blob.pbData(), blob.cbData() + 1);
    ErrMsgFromHResult(hr, m->err);
    return (char*)sValue.GetString();
}

// blob->void
void CCadesEnvelopedData_decrypt(CCadesEnvelopedData *m, char* value)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return;
    }

    CAtlStringA sValue(value);
    CryptoPro::CBlob blob((const unsigned char *)sValue.GetBuffer(), sValue.GetLength());
    HRESULT hr = m->obj->Decrypt(blob);
    ErrMsgFromHResult(hr, *(m->err));
    return;
}

// int->void
void CCadesSigner_put_options(CCadesSigner *m, int value)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return;
    }

    HRESULT hr = m->obj->put_Options((CAPICOM_CERTIFICATE_INCLUDE_OPTION)value);
    ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
    return;
}


// void->int
int CCadesSigner_get_options(CCadesSigner *m)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return 0;
    }

    CAPICOM_CERTIFICATE_INCLUDE_OPTION val;
    HRESULT hr = m->obj->get_Options(&val);
    DWORD r = (DWORD)val;
    ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
    return r;
}

// govoid->goobject
func (obj *GoCadesSigner) GetAttributes() (*GoCadesAttributes, error) {
	ret := &GoCadesAttributes{C.CCadesSigner_get_authenticated_attributes2(obj.cobjptr)}

	runtime.SetFinalizer(ret, func(obj *GoCadesAttributes) {
		C.CCadesAttributes_destroy(obj.cobjptr)
	})
	err := C.GoString(C.CCadesSigner_error(obj.cobjptr))
	if err != "" {
		return nil, errors.New(err)
	}
	return ret, nil
}

// gostring->govoid
func (obj *GoCadesSigner) PutTSAAddress(value string) error {
	cstr := C.CString(value)
	defer C.free(unsafe.Pointer(cstr))
	C.CCadesSigner_put_tsa_address(obj.cobjptr, cstr)
	err := C.GoString(C.CCadesSigner_error(obj.cobjptr))
	if err != "" {
		return errors.New(err)
	}
	return nil
}


// govoid->gostring
func (obj *GoCadesHashedData) GetValue() (string, error) {
	var ret string
	val := C.CCadesHashedData_get_value(obj.cobjptr)
	defer C.free(unsafe.Pointer(val))
	err := C.GoString(C.CCadesHashedData_error(obj.cobjptr))
	if err != "" {
		return "", errors.New(err)
	}
	ret = C.GoString(val)
	return ret, nil
}


// goint->govoid
func (obj *GoCadesHashedData) PutAlgorithm(value int) error {
	C.CCadesHashedData_put_algorithm(obj.cobjptr, C.int(value))
	err := C.GoString(C.CCadesHashedData_error(obj.cobjptr))
	if err != "" {
		return errors.New(err)
	}
	return nil
}


// gostring->govoid
func (obj *GoCadesHashedData) PutKey(value string) error {
	cstr := C.CString(value)
	defer C.free(unsafe.Pointer(cstr))
	C.CCadesHashedData_put_key(obj.cobjptr, cstr)
	err := C.GoString(C.CCadesHashedData_error(obj.cobjptr))
	if err != "" {
		return errors.New(err)
	}
	return nil
}

// int->void
void CCadesEKU_put_name(CCadesEKU *m, int value)
{
    CPPCadesEKUObject *obj;

    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, m->err);
        return;
    }

    obj = static_cast<CPPCadesEKUObject *>(m->obj);
    HRESULT hr = obj->put_Name((CAPICOM_EKU)value);
    ErrMsgFromHResult(hr, m->err);
    return;
}

// object->void
void CCadesSigner_put_authenticated_attributes(CCadesSigner *m, CCadesAttributes *obj)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return;
    }

    HRESULT hr = m->obj->put_AuthenticatedAttributes(obj->obj);
    ErrMsgFromHResult(hr, *(m->err));
    return;
}

// void->void
void CCadesAttributes_add(CCadesAttributes *m)
{
    HRESULT hr = reinterpret_cast<CPPCadesCPAttributesObject *>(m->obj)->Clear();
    ErrMsgFromHResult(hr, m->err);
    return;
}

// govoid->goint
func (obj *GoCadesHashedData) GetAlgorithm() (int, error) {
	var ret int
	val := C.CCadesHashedData_get_algorithm(obj.cobjptr)
	err := C.GoString(C.CCadesHashedData_error(obj.cobjptr))
	if err != "" {
		return ret, errors.New(err)
	}
	ret = int(val)
	return ret, nil
}

// goint->goobject
func (obj *GoCadesAttributes) GetItem(value int) (*GoCadesAttribute, error) {
	ret := &GoCadesAttribute{C.CCadesAttributes_get_item(obj.cobjptr, C.int(value))}

	runtime.SetFinalizer(ret, func(obj *GoCadesAttribute) {
		C.CCadesAttribute_destroy(obj.cobjptr)
	})
	err := C.GoString(obj.cobjptr.err)
	if err != "" {
		return nil, errors.New(err)
	}
	return ret, nil
}

// goobject->govoid
func (obj *GoCadesAttributes) Add(value GoCadesAttribute) error {
	C.CCadesAttributes_add(obj.cobjptr, value.cobjptr)
	err := C.GoString(obj.cobjptr.err)
	if err != "" {
		return errors.New(err)
	}
	return nil
}

// govoid->govoid
func (obj *GoCadesAttributes) Clear() error {
	C.CCadesAttributes_clear(obj.cobjptr)
	err := C.GoString(obj.cobjptr.err)
	if err != "" {
		return errors.New(err)
	}
	return nil
}

// int->blob
char* CCadesEnvelopedData_export(CCadesEnvelopedData *m, int value)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return 0;
    }

    CryptoPro::CBlob blob;
    HRESULT hr = m->obj->Encrypt((CAPICOM_ENCODING_TYPE)value, blob);
    char *buf = (char*)calloc(blob.cbData() + 1, sizeof(char));
    memcpy(buf, blob.pbData(), blob.cbData());
    ErrMsgFromHResult(hr, *(m->err));
    return buf;
}

// int->string
char* CCadesCertificate_get_value(CCadesCertificate *m, int value)
{
    CPPCadesCPCertificateObject *obj;

    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, m->err);
        return 0;
    }

    obj = static_cast<CPPCadesCPCertificateObject *>(m->obj);
    CAtlString sValue;
    HRESULT hr = obj->get_Value((CAPICOM_CERT_INFO_TYPE)value, sValue);
    char *buf = (char*)calloc(sValue.GetLength(), sizeof(char));
    memcpy(buf, sValue.GetBuffer(), sValue.GetLength());
    ErrMsgFromHResult(hr, m->err);
    return buf;
}


// goint->gostring
func (obj *GoCadesEnvelopedData) Encrypt(value int) (string, error) {
	var ret string
	val := C.CCadesEnvelopedData_encrypt(obj.cobjptr, C.int(value))
	defer C.free(unsafe.Pointer(val))
	err := C.GoString(C.CCadesEnvelopedData_error(obj.cobjptr))
	if err != "" {
		return "", errors.New(err)
	}
	ret = C.GoString(val)
	return ret, nil
}

// void->blob
char* CCadesCRL_get_issuer_name(CCadesCRL *m)
{
    CPPCadesCPCRLObject *obj;

    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, m->err);
        return 0;
    }

    CryptoPro::CBlob blob;
    HRESULT hr = obj->get_IssuerName(sValue);
    char *buf = (char*)calloc(blob.cbData() + 1, sizeof(char));
    memcpy(buf, blob.pbData(), blob.cbData());
    ErrMsgFromHResult(hr, m->err);
    return buf;
}

// void->string
char* CCadesSigner_get_tsa_address(CCadesSigner *m)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return 0;
    }

    CAtlStringA sValue;
    HRESULT hr = m->obj->get_TSAAddress(sValue);
    char *buf = (char*)calloc(sValue.GetLength(), sizeof(char));
    memcpy(buf, sValue.GetBuffer(), sValue.GetLength());
    ErrMsgFromHResult(hr, *(m->err));
    return buf;
}

// void->time
char* CCadesSigner_get_signature_timestamp_time(CCadesSigner *m)
{
    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, *(m->err));
        return 0;
    }

    CryptoPro::CDateTime d;
    HRESULT hr = m->obj->get_SignatureTimeStampTime(d);
    CAtlString sValue = d.tostring().c_str();
    ErrMsgFromHResult(hr, *(m->err));
    char *buf = (char*)calloc(sValue.GetLength() + 1, sizeof(char));
    memcpy(buf, sValue.GetBuffer(), sValue.GetLength());
    ErrMsgFromHResult(hr, *(m->err));
    return buf;
}

// void->bool
bool CCadesBasicConstraints_get_is_present(CCadesBasicConstraints *m)
{
    CPPCadesCPBasicConstraintsObject *obj;

    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, m->err);
        return 0;
    }

    obj = static_cast<CPPCadesCPBasicConstraintsObject *>(m->obj);
    BOOL res;
    HRESULT hr = obj->get_IsPresent(&res);
    ErrMsgFromHResult(hr, m->err);
    return res;
}

// govoid->gobool
func (obj *GoCadesSigner) GetCheckCertificate() (bool, error) {
	var ret bool
	val := C.CCadesSigner_get_check_certificate(obj.cobjptr)
	err := C.GoString(C.CCadesSigner_error(obj.cobjptr))
	if err != "" {
		return ret, errors.New(err)
	}
	ret = bool(val)
	return ret, nil
}

// gobool->govoid
func (obj *GoCadesSigner) PutCheckCertificate(value bool) error {
	C.CCadesSigner_put_check_certificate(obj.cobjptr, C.bool(value))
	err := C.GoString(C.CCadesSigner_error(obj.cobjptr))
	if err != "" {
		return errors.New(err)
	}
	return nil
}


// bool->void
void CCadesPrivateKey_set_cache(CCadesPrivateKey *m, bool value)
{
    CPPCadesCPPrivateKeyObject *obj;

    if (m == NULL){
        ErrMsgFromHResult(E_UNEXPECTED, m->err);
        return;
    }

    obj = static_cast<CPPCadesCPPrivateKeyObject *>(m->obj);
    DWORD r = value ? TRUE : FALSE;
    HRESULT hr = obj->set_CachePin(r);
    ErrMsgFromHResult(hr, m->err);
    return;
}
