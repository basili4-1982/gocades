package gocades

import (
	"testing"
)

var Cert = "MIINsjCCDJqgAwIBAgIRAPq8ife/MxCUCgAAAAEl/TIwDQYJKoZIhvcNAQELBQAwRjELMAkGA1UEBhMCVVMxIjAgBgNVBAoTGUdvb2dsZSBUcnVzdCBTZXJ2aWNlcyBMTEMxEzARBgNVBAMTCkdUUyBDQSAxQzMwHhcNMjExMTI5MDIyMjMzWhcNMjIwMjIxMDIyMjMyWjAXMRUwEwYDVQQDDAwqLmdvb2dsZS5jb20wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAShwtJ0zDJohmgYDI9a4Sxu+2c8JyYLtfnS/wdyRoIXUchfFuyrWO+bwp1BW6Fkauoqu0LeDXO8oysHN8gba4Vdo4ILkzCCC48wDgYDVR0PAQH/BAQDAgeAMBMGA1UdJQQMMAoGCCsGAQUFBwMBMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFAQOcJ1gEZcBGw5+crGZ5Sj3KeByMB8GA1UdIwQYMBaAFIp0f6+Fze6VzT2c0OJGFPNxNR0nMGoGCCsGAQUFBwEBBF4wXDAnBggrBgEFBQcwAYYbaHR0cDovL29jc3AucGtpLmdvb2cvZ3RzMWMzMDEGCCsGAQUFBzAChiVodHRwOi8vcGtpLmdvb2cvcmVwby9jZXJ0cy9ndHMxYzMuZGVyMIIJQgYDVR0RBIIJOTCCCTWCDCouZ29vZ2xlLmNvbYIWKi5hcHBlbmdpbmUuZ29vZ2xlLmNvbYIJKi5iZG4uZGV2ghIqLmNsb3VkLmdvb2dsZS5jb22CGCouY3Jvd2Rzb3VyY2UuZ29vZ2xlLmNvbYIYKi5kYXRhY29tcHV0ZS5nb29nbGUuY29tggsqLmdvb2dsZS5jYYILKi5nb29nbGUuY2yCDiouZ29vZ2xlLmNvLmlugg4qLmdvb2dsZS5jby5qcIIOKi5nb29nbGUuY28udWuCDyouZ29vZ2xlLmNvbS5hcoIPKi5nb29nbGUuY29tLmF1gg8qLmdvb2dsZS5jb20uYnKCDyouZ29vZ2xlLmNvbS5jb4IPKi5nb29nbGUuY29tLm14gg8qLmdvb2dsZS5jb20udHKCDyouZ29vZ2xlLmNvbS52boILKi5nb29nbGUuZGWCCyouZ29vZ2xlLmVzggsqLmdvb2dsZS5mcoILKi5nb29nbGUuaHWCCyouZ29vZ2xlLml0ggsqLmdvb2dsZS5ubIILKi5nb29nbGUucGyCCyouZ29vZ2xlLnB0ghIqLmdvb2dsZWFkYXBpcy5jb22CDyouZ29vZ2xlYXBpcy5jboIRKi5nb29nbGV2aWRlby5jb22CDCouZ3N0YXRpYy5jboIQKi5nc3RhdGljLWNuLmNvbYIPZ29vZ2xlY25hcHBzLmNughEqLmdvb2dsZWNuYXBwcy5jboIRZ29vZ2xlYXBwcy1jbi5jb22CEyouZ29vZ2xlYXBwcy1jbi5jb22CDGdrZWNuYXBwcy5jboIOKi5na2VjbmFwcHMuY26CEmdvb2dsZWRvd25sb2Fkcy5jboIUKi5nb29nbGVkb3dubG9hZHMuY26CEHJlY2FwdGNoYS5uZXQuY26CEioucmVjYXB0Y2hhLm5ldC5jboILd2lkZXZpbmUuY26CDSoud2lkZXZpbmUuY26CEWFtcHByb2plY3Qub3JnLmNughMqLmFtcHByb2plY3Qub3JnLmNughFhbXBwcm9qZWN0Lm5ldC5jboITKi5hbXBwcm9qZWN0Lm5ldC5jboIXZ29vZ2xlLWFuYWx5dGljcy1jbi5jb22CGSouZ29vZ2xlLWFuYWx5dGljcy1jbi5jb22CF2dvb2dsZWFkc2VydmljZXMtY24uY29tghkqLmdvb2dsZWFkc2VydmljZXMtY24uY29tghFnb29nbGV2YWRzLWNuLmNvbYITKi5nb29nbGV2YWRzLWNuLmNvbYIRZ29vZ2xlYXBpcy1jbi5jb22CEyouZ29vZ2xlYXBpcy1jbi5jb22CFWdvb2dsZW9wdGltaXplLWNuLmNvbYIXKi5nb29nbGVvcHRpbWl6ZS1jbi5jb22CEmRvdWJsZWNsaWNrLWNuLm5ldIIUKi5kb3VibGVjbGljay1jbi5uZXSCGCouZmxzLmRvdWJsZWNsaWNrLWNuLm5ldIIWKi5nLmRvdWJsZWNsaWNrLWNuLm5ldIIOZG91YmxlY2xpY2suY26CECouZG91YmxlY2xpY2suY26CFCouZmxzLmRvdWJsZWNsaWNrLmNughIqLmcuZG91YmxlY2xpY2suY26CEWRhcnRzZWFyY2gtY24ubmV0ghMqLmRhcnRzZWFyY2gtY24ubmV0gh1nb29nbGV0cmF2ZWxhZHNlcnZpY2VzLWNuLmNvbYIfKi5nb29nbGV0cmF2ZWxhZHNlcnZpY2VzLWNuLmNvbYIYZ29vZ2xldGFnc2VydmljZXMtY24uY29tghoqLmdvb2dsZXRhZ3NlcnZpY2VzLWNuLmNvbYIXZ29vZ2xldGFnbWFuYWdlci1jbi5jb22CGSouZ29vZ2xldGFnbWFuYWdlci1jbi5jb22CGGdvb2dsZXN5bmRpY2F0aW9uLWNuLmNvbYIaKi5nb29nbGVzeW5kaWNhdGlvbi1jbi5jb22CJCouc2FmZWZyYW1lLmdvb2dsZXN5bmRpY2F0aW9uLWNuLmNvbYIWYXBwLW1lYXN1cmVtZW50LWNuLmNvbYIYKi5hcHAtbWVhc3VyZW1lbnQtY24uY29tggtndnQxLWNuLmNvbYINKi5ndnQxLWNuLmNvbYILZ3Z0Mi1jbi5jb22CDSouZ3Z0Mi1jbi5jb22CCzJtZG4tY24ubmV0gg0qLjJtZG4tY24ubmV0ghRnb29nbGVmbGlnaHRzLWNuLm5ldIIWKi5nb29nbGVmbGlnaHRzLWNuLm5ldIIMYWRtb2ItY24uY29tgg4qLmFkbW9iLWNuLmNvbYINKi5nc3RhdGljLmNvbYIUKi5tZXRyaWMuZ3N0YXRpYy5jb22CCiouZ3Z0MS5jb22CESouZ2NwY2RuLmd2dDEuY29tggoqLmd2dDIuY29tgg4qLmdjcC5ndnQyLmNvbYIQKi51cmwuZ29vZ2xlLmNvbYIWKi55b3V0dWJlLW5vY29va2llLmNvbYILKi55dGltZy5jb22CC2FuZHJvaWQuY29tgg0qLmFuZHJvaWQuY29tghMqLmZsYXNoLmFuZHJvaWQuY29tggRnLmNuggYqLmcuY26CBGcuY2+CBiouZy5jb4IGZ29vLmdsggp3d3cuZ29vLmdsghRnb29nbGUtYW5hbHl0aWNzLmNvbYIWKi5nb29nbGUtYW5hbHl0aWNzLmNvbYIKZ29vZ2xlLmNvbYISZ29vZ2xlY29tbWVyY2UuY29tghQqLmdvb2dsZWNvbW1lcmNlLmNvbYIIZ2dwaHQuY26CCiouZ2dwaHQuY26CCnVyY2hpbi5jb22CDCoudXJjaGluLmNvbYIIeW91dHUuYmWCC3lvdXR1YmUuY29tgg0qLnlvdXR1YmUuY29tghR5b3V0dWJlZWR1Y2F0aW9uLmNvbYIWKi55b3V0dWJlZWR1Y2F0aW9uLmNvbYIPeW91dHViZWtpZHMuY29tghEqLnlvdXR1YmVraWRzLmNvbYIFeXQuYmWCByoueXQuYmWCGmFuZHJvaWQuY2xpZW50cy5nb29nbGUuY29tghtkZXZlbG9wZXIuYW5kcm9pZC5nb29nbGUuY26CHGRldmVsb3BlcnMuYW5kcm9pZC5nb29nbGUuY26CGHNvdXJjZS5hbmRyb2lkLmdvb2dsZS5jbjAhBgNVHSAEGjAYMAgGBmeBDAECATAMBgorBgEEAdZ5AgUDMDwGA1UdHwQ1MDMwMaAvoC2GK2h0dHA6Ly9jcmxzLnBraS5nb29nL2d0czFjMy9RcUZ4Ymk5TTQ4Yy5jcmwwggEFBgorBgEEAdZ5AgQCBIH2BIHzAPEAdwApeb7wnjk5IfBWc59jpXflvld9nGAK+PlNXSZcJV3HhAAAAX1pt0b0AAAEAwBIMEYCIQC1x9lAp2IZtthi0mxfjtSDXCR714tElKslM61c4kJv/gIhAJPjgGFY5XBnQSaV/jHFfoRcbksMU+lruflT+sfvLLqcAHYAQcjKsd8iRkoQxqE6CUKHXk4xixsD6+tLx2jwkGKWBvYAAAF9abdHmAAABAMARzBFAiEAhzUCqPYG77z0wZUE3y2DmZhTaStBB9BMVBfYSQmYTogCIHbA8hBzj6kjpaw57ZidtP5Dz5Zli2xOJQB+W4s15tI8MA0GCSqGSIb3DQEBCwUAA4IBAQB2aorYRKwUQJI280q1y1Q2Z8c6pem1MWxRX/Ptapmsp1ucrsmu+VaC1YMCSlW1exVieyMhOIvcKDBy/8L0FUEAmsL8fCTroRQ4DnZVLelFk9vmVsiSQtfYHOf6rwEbOrv+94kk964iQCLQFYN5klRqI0hWa3wYe6tnXm/2PvPbAwqsnAq3q+Iek+3pGm6YTshJyA7P9L176psddm6slAYpHOryFcrvXzu1lHSylCAFNT/OYcH1GLTf0qJXuN7YnX9swoYu2oCDkIyAHss2DDp7f8qf0VgDNNxZB8drZ9ID85YA3qgeIbHHAB8UIj8qkKXkmybfMxVL0lz3iY73asSm"
var Crl = ""

func TestAbout(t *testing.T) {
	about, _ := About()
	about.GetVersion()
	about.GetMajorVersion()
	about.GetMinorVersion()
	about.GetBuildVersion()
	about.GetCSPVersion("", 80)
	about.GetCSPName(80)
	about.MediaFilter(MEDIA_TYPE_SCARD)
	about.ReaderFilter(ENABLE_ANY_CARRIER_TYPE, DISABLE_EVERY_CARRIER_OPERATION, ".*rutoken.*")
}

func TestVersion(t *testing.T) {
	about, _ := About()
	version, _ := about.GetCSPVersion("", 80)
	version.ToString()
	version.GetMajorVersion()
	version.GetMinorVersion()
	version.GetBuildVersion()
}

func TestAttribute(t *testing.T) {
	attribute, _ := Attribute()
	attribute.PutValue("ABCD")
	attribute.GetValue()
	attribute.PutName(2)
	attribute.GetName()
	attribute.PutValueEncoding(1)
	attribute.GetValueEncoding()
	attribute.PutOID("1.2.3.3.5")
	attribute.GetOID()
}

func TestOID(t *testing.T) {
	attribute, _ := Attribute()
	oid, _ := attribute.GetOID()
	oid.SetFriendlyName("ГОСТ Р 34.10-2001")
	oid.GetFriendlyName()
	oid.GetValue()
	oid.SetValue("1.2.643.7.1.1.2.2")
	oid.GetFriendlyName()
	oid.SetName(1)
	oid.GetName()
	oid.GetValue()
}

func TestLicense(t *testing.T) {
	license, _ := License()
	license.GetCompanyName(0)
	license.GetFirstInstallDate(0)
	license.GetSerialNumber(0)
	license.GetType(0)
	license.GetValidTo(0)
}

func TestCRL(t *testing.T) {
	crl, _ := CRL()
	crl.Import(Crl)
	crl.GetIssuerName()
	crl.GetThisUpdate()
	crl.GetNextUpdate()
	crl.GetThumbprint()
	crl.GetAuthKeyID()
	crl.Export(CADESCOM_ENCODE_BASE64)
}

func TestCertificate(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	certificate.Export(CADESCOM_ENCODE_BASE64)
	certificate.GetBasicConstraints()
	certificate.GetExtendedKeyUsage()
	certificate.GetKeyUsage()
	certificate.GetPublicKey()
	certificate.GetPrivateKey()
	certificate.IsValid()
	certificate.GetInfo(CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME)
	certificate.HasPrivateKey()
	certificate.FindPrivateKey()
	certificate.GetIssuerName()
	certificate.GetSerialNumber()
	certificate.GetSubjectName()
	certificate.GetThumbprint()
	certificate.GetValidToDate()
	certificate.GetValidFromDate()
	certificate.GetVersion()
}

func TestCertificateStatus(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	certstatus, _ := certificate.IsValid()
	certstatus.GetResult()
}

func TestBasicConstraints(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	result, _ := certificate.GetBasicConstraints()
	result.GetIsCertificateAuthority()
	result.GetIsCritical()
	result.GetIsPathLenConstraintPresent()
	result.GetIsPresent()
	result.GetPathLenConstraint()
}

func TestExtendedKeyUsage(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	extkeyusage, _ := certificate.GetExtendedKeyUsage()
	extkeyusage.GetIsCritical()
	extkeyusage.GetIsPresent()
	extkeyusage.GetEKUs()
}

func TestEKUs(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	extkeyusage, _ := certificate.GetExtendedKeyUsage()
	ekus, _ := extkeyusage.GetEKUs()
	ekus.GetCount()
	ekus.GetItem(1)
}

func TestEKU(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	extkeyusage, _ := certificate.GetExtendedKeyUsage()
	ekus, _ := extkeyusage.GetEKUs()
	eku, _ := ekus.GetItem(1)
	eku.GetName()
	eku.GetOID()
	eku.SetName(2)
	eku.GetName()
	eku.GetOID()
	eku.PutOID("1.2.8.4")
	eku.GetOID()
}

func TestKeyUsage(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	keyusage, _ := certificate.GetKeyUsage()
	keyusage.GetIsCRLSignEnabled()
	keyusage.GetIsCritical()
	keyusage.GetIsDataEnciphermentEnabled()
	keyusage.GetIsDecipherOnlyEnabled()
	keyusage.GetIsDigitalSignatureEnabled()
	keyusage.GetIsEncipherOnlyEnabled()
	keyusage.GetIsKeyAgreementEnabled()
	keyusage.GetIsKeyCertSignEnabled()
	keyusage.GetIsKeyEnciphermentEnabled()
	keyusage.GetIsNonRepudationEnabled()
	keyusage.GetIsPresent()
}

func TestPublicKey(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	publickey, _ := certificate.GetPublicKey()
	publickey.GetAlgorithm()
	publickey.GetEncodedKey()
	publickey.GetEncodedParameters()
	publickey.GetLength()
}

func TestEncodedData(t *testing.T) {
	certificate, _ := Certificate()
	certificate.Import(Cert)
	publickey, _ := certificate.GetPublicKey()
	encodeddata, _ := publickey.GetEncodedKey()
	encodeddata.Format(true)
	encodeddata.GetValue(CADESCOM_ENCODE_BASE64)
}

func TestStore(t *testing.T) {
	store, _ := Store()
	store.Open(CADESCOM_MEMORY_STORE, "My", CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED)
	store.GetCertificates()
	store.GetLocation()
	store.GetName()
	cert, _ := Certificate()
	cert.Import(Cert)
	store.Add(*cert)
	crl, _ := CRL()
	crl.Import(Crl)
	store.AddCRL(*crl)
	store.Close()
}

func TestCertificates(t *testing.T) {
	store, _ := Store()
	store.Open(CADESCOM_CURRENT_USER_STORE, "My", CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED)
	certificates, _ := store.GetCertificates()
	certificates.GetCount()
	cert, _ := certificates.GetItem(1)
	cert.GetSubjectName()
	certs2, _ := certificates.Find(CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME, "test", true)
	certs2.GetCount()
}
